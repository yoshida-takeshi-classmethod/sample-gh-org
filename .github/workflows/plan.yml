name: terraform plan

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'terraform/*.tf'
      - 'users/*.csv'
      - '.github/workflows/*.yml'

jobs:
  plan:
    name: terraform plan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.5

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - run: terraform init
        working-directory: terraform

      - id: fmt
        run: terraform fmt
        working-directory: terraform

      # terraform fmtでフォーマットされた場合、コミットしてプッシュ
      - name: Commit changes
        run: |
          if [[ -n "$(git status -s)" ]]; then
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git add .
            git commit -m "terraform fmt"
            git push origin ${{ github.head_ref }}
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - id: validate
        run: terraform validate -no-color
        working-directory: terraform
        continue-on-error: true

      # terraform validate失敗時の結果をプルリクエストに出力
      - uses: actions/github-script@v6
        if: steps.validate.outcome == 'failure'
        env:
          STDERR: "```${{ steps.validate.outputs.stderr }}```"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.STDERR
            });
            core.setFailed('terraform validate failed');

      - name: Make script executable
        run: chmod +x ./script.sh
        working-directory: shell

      - name: Generate GitHub Apps token
        id: generate
        env:
          APP_ID: ${{ secrets.APP_ID }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          ./script.sh
        working-directory: shell

      - id: plan
        run: terraform plan -no-color
        working-directory: terraform
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ steps.generate.outputs.token }}

      # terraform plan成功時・失敗時それぞれの結果をプルリクエストに出力
      - uses: actions/github-script@v6
        if: steps.plan.outcome == 'failure'
        env:
          STDERR: "```${{ steps.plan.outputs.stderr }}```"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.STDERR
            });
            core.setFailed('terraform plan failed');

      - uses: actions/github-script@v6
        if: steps.plan.outcome == 'success'
        env:
          STDOUT: "```${{ steps.plan.outputs.stdout }}```"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.STDOUT
            })

      - name: Revoke GitHub Apps token
        if: ${{ always() }}
        env:
          GITHUB_TOKEN: ${{ steps.generate.outputs.token }}
        run: |
          curl --location --silent --request DELETE \
            --url "${GITHUB_API_URL}/installation/token" \
            --header "Accept: application/vnd.github+json" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            --header "Authorization: Bearer ${GITHUB_TOKEN}"